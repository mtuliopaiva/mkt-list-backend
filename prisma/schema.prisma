generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  superAdmin
  admin
  user
}

model Permissions {
  uuid        String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  active      Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  roles       Roles[]   @relation("RolePermissions")

  @@map("permissions")
}

model Roles {
  uuid        String        @id @default(uuid()) @db.Uuid
  name        String
  description String?
  active      Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  permissions Permissions[] @relation("RolePermissions")
  users       Users[]

  @@map("roles")
}

model Users {
  uuid            String    @id @default(uuid()) @db.Uuid
  name            String    @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  password        String    @db.Text()
  role            Int       @db.Integer
  userType        UserType
  profileImageUrl String?   @db.Text()
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  roles Roles[]
  lists List[]

  @@map("users")
}

model Category {
  uuid      String    @id @default(uuid()) @db.Uuid
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products Product[]
}

model Product {
  uuid       String    @id @default(uuid()) @db.Uuid
  name       String    @db.VarChar(255)
  price      Float
  categoryId String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  category  Category   @relation(fields: [categoryId], references: [uuid])
  listItems ListItem[]
}

model List {
  uuid      String    @id @default(uuid()) @db.Uuid
  name      String    @db.VarChar(255)
  userId    String    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user      Users      @relation(fields: [userId], references: [uuid])
  listItems ListItem[]
}

model ListItem {
  uuid           String    @id @default(uuid()) @db.Uuid
  quantity       Int
  productId      String    @db.Uuid
  listId String    @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  product Product @relation(fields: [productId], references: [uuid])
  list    List    @relation(fields: [listId], references: [uuid])
}
